// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  geometry: (where?: GeometryWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  meeting: (where?: MeetingWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  geometry: (where: GeometryWhereUniqueInput) => GeometryNullablePromise;
  geometries: (args?: {
    where?: GeometryWhereInput;
    orderBy?: GeometryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Geometry>;
  geometriesConnection: (args?: {
    where?: GeometryWhereInput;
    orderBy?: GeometryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GeometryConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  meeting: (where: MeetingWhereUniqueInput) => MeetingNullablePromise;
  meetings: (args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Meeting>;
  meetingsConnection: (args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MeetingConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGeometry: (data: GeometryCreateInput) => GeometryPromise;
  updateGeometry: (args: {
    data: GeometryUpdateInput;
    where: GeometryWhereUniqueInput;
  }) => GeometryPromise;
  updateManyGeometries: (args: {
    data: GeometryUpdateManyMutationInput;
    where?: GeometryWhereInput;
  }) => BatchPayloadPromise;
  upsertGeometry: (args: {
    where: GeometryWhereUniqueInput;
    create: GeometryCreateInput;
    update: GeometryUpdateInput;
  }) => GeometryPromise;
  deleteGeometry: (where: GeometryWhereUniqueInput) => GeometryPromise;
  deleteManyGeometries: (where?: GeometryWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createMeeting: (data: MeetingCreateInput) => MeetingPromise;
  updateMeeting: (args: {
    data: MeetingUpdateInput;
    where: MeetingWhereUniqueInput;
  }) => MeetingPromise;
  updateManyMeetings: (args: {
    data: MeetingUpdateManyMutationInput;
    where?: MeetingWhereInput;
  }) => BatchPayloadPromise;
  upsertMeeting: (args: {
    where: MeetingWhereUniqueInput;
    create: MeetingCreateInput;
    update: MeetingUpdateInput;
  }) => MeetingPromise;
  deleteMeeting: (where: MeetingWhereUniqueInput) => MeetingPromise;
  deleteManyMeetings: (where?: MeetingWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  geometry: (
    where?: GeometrySubscriptionWhereInput
  ) => GeometrySubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  meeting: (
    where?: MeetingSubscriptionWhereInput
  ) => MeetingSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type regionType =
  | "Minskaya"
  | "Brestskaya"
  | "Gomelskaya"
  | "Mogilevskaya"
  | "Grodnenskaya"
  | "Vitebskaya";

export type Weekday = "Mo" | "Tu" | "We" | "Th" | "Fr" | "Sa" | "Su";

export type meetingType = "Open" | "Closed";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "city_ASC"
  | "city_DESC"
  | "region_ASC"
  | "region_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "address_ASC"
  | "address_DESC";

export type MeetingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "weekday_ASC"
  | "weekday_DESC"
  | "time_ASC"
  | "time_DESC"
  | "type_ASC"
  | "type_DESC";

export type GeometryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GeometryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  author?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  region?: Maybe<regionType>;
  region_not?: Maybe<regionType>;
  region_in?: Maybe<regionType[] | regionType>;
  region_not_in?: Maybe<regionType[] | regionType>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  geodata?: Maybe<GeometryWhereInput>;
  meetings_every?: Maybe<MeetingWhereInput>;
  meetings_some?: Maybe<MeetingWhereInput>;
  meetings_none?: Maybe<MeetingWhereInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  groups_every?: Maybe<GroupWhereInput>;
  groups_some?: Maybe<GroupWhereInput>;
  groups_none?: Maybe<GroupWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface GeometryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  group?: Maybe<GroupWhereInput>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  AND?: Maybe<GeometryWhereInput[] | GeometryWhereInput>;
  OR?: Maybe<GeometryWhereInput[] | GeometryWhereInput>;
  NOT?: Maybe<GeometryWhereInput[] | GeometryWhereInput>;
}

export interface MeetingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  group?: Maybe<GroupWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  weekday?: Maybe<Weekday>;
  weekday_not?: Maybe<Weekday>;
  weekday_in?: Maybe<Weekday[] | Weekday>;
  weekday_not_in?: Maybe<Weekday[] | Weekday>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  type?: Maybe<meetingType>;
  type_not?: Maybe<meetingType>;
  type_in?: Maybe<meetingType[] | meetingType>;
  type_not_in?: Maybe<meetingType[] | meetingType>;
  AND?: Maybe<MeetingWhereInput[] | MeetingWhereInput>;
  OR?: Maybe<MeetingWhereInput[] | MeetingWhereInput>;
  NOT?: Maybe<MeetingWhereInput[] | MeetingWhereInput>;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MeetingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface GeometryCreateInput {
  id?: Maybe<ID_Input>;
  group: GroupCreateOneWithoutGeodataInput;
  latitude: Float;
  longitude: Float;
}

export interface GroupCreateOneWithoutGeodataInput {
  create?: Maybe<GroupCreateWithoutGeodataInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutGeodataInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneWithoutGroupsInput;
  name?: Maybe<String>;
  description?: Maybe<String>;
  city: String;
  region: regionType;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
  meetings?: Maybe<MeetingCreateManyWithoutGroupInput>;
}

export interface UserCreateOneWithoutGroupsInput {
  create?: Maybe<UserCreateWithoutGroupsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutGroupsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
}

export interface MeetingCreateManyWithoutGroupInput {
  create?: Maybe<
    MeetingCreateWithoutGroupInput[] | MeetingCreateWithoutGroupInput
  >;
  connect?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
}

export interface MeetingCreateWithoutGroupInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  weekday: Weekday;
  time: String;
  type?: Maybe<meetingType>;
}

export interface GeometryUpdateInput {
  group?: Maybe<GroupUpdateOneRequiredWithoutGeodataInput>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
}

export interface GroupUpdateOneRequiredWithoutGeodataInput {
  create?: Maybe<GroupCreateWithoutGeodataInput>;
  update?: Maybe<GroupUpdateWithoutGeodataDataInput>;
  upsert?: Maybe<GroupUpsertWithoutGeodataInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutGeodataDataInput {
  author?: Maybe<UserUpdateOneRequiredWithoutGroupsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  city?: Maybe<String>;
  region?: Maybe<regionType>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
  meetings?: Maybe<MeetingUpdateManyWithoutGroupInput>;
}

export interface UserUpdateOneRequiredWithoutGroupsInput {
  create?: Maybe<UserCreateWithoutGroupsInput>;
  update?: Maybe<UserUpdateWithoutGroupsDataInput>;
  upsert?: Maybe<UserUpsertWithoutGroupsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutGroupsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpsertWithoutGroupsInput {
  update: UserUpdateWithoutGroupsDataInput;
  create: UserCreateWithoutGroupsInput;
}

export interface MeetingUpdateManyWithoutGroupInput {
  create?: Maybe<
    MeetingCreateWithoutGroupInput[] | MeetingCreateWithoutGroupInput
  >;
  delete?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  connect?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  set?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  disconnect?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  update?: Maybe<
    | MeetingUpdateWithWhereUniqueWithoutGroupInput[]
    | MeetingUpdateWithWhereUniqueWithoutGroupInput
  >;
  upsert?: Maybe<
    | MeetingUpsertWithWhereUniqueWithoutGroupInput[]
    | MeetingUpsertWithWhereUniqueWithoutGroupInput
  >;
  deleteMany?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
  updateMany?: Maybe<
    | MeetingUpdateManyWithWhereNestedInput[]
    | MeetingUpdateManyWithWhereNestedInput
  >;
}

export interface MeetingUpdateWithWhereUniqueWithoutGroupInput {
  where: MeetingWhereUniqueInput;
  data: MeetingUpdateWithoutGroupDataInput;
}

export interface MeetingUpdateWithoutGroupDataInput {
  name?: Maybe<String>;
  weekday?: Maybe<Weekday>;
  time?: Maybe<String>;
  type?: Maybe<meetingType>;
}

export interface MeetingUpsertWithWhereUniqueWithoutGroupInput {
  where: MeetingWhereUniqueInput;
  update: MeetingUpdateWithoutGroupDataInput;
  create: MeetingCreateWithoutGroupInput;
}

export interface MeetingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  weekday?: Maybe<Weekday>;
  weekday_not?: Maybe<Weekday>;
  weekday_in?: Maybe<Weekday[] | Weekday>;
  weekday_not_in?: Maybe<Weekday[] | Weekday>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  type?: Maybe<meetingType>;
  type_not?: Maybe<meetingType>;
  type_in?: Maybe<meetingType[] | meetingType>;
  type_not_in?: Maybe<meetingType[] | meetingType>;
  AND?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
  OR?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
  NOT?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
}

export interface MeetingUpdateManyWithWhereNestedInput {
  where: MeetingScalarWhereInput;
  data: MeetingUpdateManyDataInput;
}

export interface MeetingUpdateManyDataInput {
  name?: Maybe<String>;
  weekday?: Maybe<Weekday>;
  time?: Maybe<String>;
  type?: Maybe<meetingType>;
}

export interface GroupUpsertWithoutGeodataInput {
  update: GroupUpdateWithoutGeodataDataInput;
  create: GroupCreateWithoutGeodataInput;
}

export interface GeometryUpdateManyMutationInput {
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneWithoutGroupsInput;
  name?: Maybe<String>;
  description?: Maybe<String>;
  city: String;
  region: regionType;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
  geodata: GeometryCreateOneWithoutGroupInput;
  meetings?: Maybe<MeetingCreateManyWithoutGroupInput>;
}

export interface GeometryCreateOneWithoutGroupInput {
  create?: Maybe<GeometryCreateWithoutGroupInput>;
  connect?: Maybe<GeometryWhereUniqueInput>;
}

export interface GeometryCreateWithoutGroupInput {
  id?: Maybe<ID_Input>;
  latitude: Float;
  longitude: Float;
}

export interface GroupUpdateInput {
  author?: Maybe<UserUpdateOneRequiredWithoutGroupsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  city?: Maybe<String>;
  region?: Maybe<regionType>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
  geodata?: Maybe<GeometryUpdateOneRequiredWithoutGroupInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutGroupInput>;
}

export interface GeometryUpdateOneRequiredWithoutGroupInput {
  create?: Maybe<GeometryCreateWithoutGroupInput>;
  update?: Maybe<GeometryUpdateWithoutGroupDataInput>;
  upsert?: Maybe<GeometryUpsertWithoutGroupInput>;
  connect?: Maybe<GeometryWhereUniqueInput>;
}

export interface GeometryUpdateWithoutGroupDataInput {
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
}

export interface GeometryUpsertWithoutGroupInput {
  update: GeometryUpdateWithoutGroupDataInput;
  create: GeometryCreateWithoutGroupInput;
}

export interface GroupUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  city?: Maybe<String>;
  region?: Maybe<regionType>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
}

export interface MeetingCreateInput {
  id?: Maybe<ID_Input>;
  group: GroupCreateOneWithoutMeetingsInput;
  name?: Maybe<String>;
  weekday: Weekday;
  time: String;
  type?: Maybe<meetingType>;
}

export interface GroupCreateOneWithoutMeetingsInput {
  create?: Maybe<GroupCreateWithoutMeetingsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutMeetingsInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneWithoutGroupsInput;
  name?: Maybe<String>;
  description?: Maybe<String>;
  city: String;
  region: regionType;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
  geodata: GeometryCreateOneWithoutGroupInput;
}

export interface MeetingUpdateInput {
  group?: Maybe<GroupUpdateOneRequiredWithoutMeetingsInput>;
  name?: Maybe<String>;
  weekday?: Maybe<Weekday>;
  time?: Maybe<String>;
  type?: Maybe<meetingType>;
}

export interface GroupUpdateOneRequiredWithoutMeetingsInput {
  create?: Maybe<GroupCreateWithoutMeetingsInput>;
  update?: Maybe<GroupUpdateWithoutMeetingsDataInput>;
  upsert?: Maybe<GroupUpsertWithoutMeetingsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutMeetingsDataInput {
  author?: Maybe<UserUpdateOneRequiredWithoutGroupsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  city?: Maybe<String>;
  region?: Maybe<regionType>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
  geodata?: Maybe<GeometryUpdateOneRequiredWithoutGroupInput>;
}

export interface GroupUpsertWithoutMeetingsInput {
  update: GroupUpdateWithoutMeetingsDataInput;
  create: GroupCreateWithoutMeetingsInput;
}

export interface MeetingUpdateManyMutationInput {
  name?: Maybe<String>;
  weekday?: Maybe<Weekday>;
  time?: Maybe<String>;
  type?: Maybe<meetingType>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  groups?: Maybe<GroupCreateManyWithoutAuthorInput>;
}

export interface GroupCreateManyWithoutAuthorInput {
  create?: Maybe<
    GroupCreateWithoutAuthorInput[] | GroupCreateWithoutAuthorInput
  >;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  city: String;
  region: regionType;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
  geodata: GeometryCreateOneWithoutGroupInput;
  meetings?: Maybe<MeetingCreateManyWithoutGroupInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  groups?: Maybe<GroupUpdateManyWithoutAuthorInput>;
}

export interface GroupUpdateManyWithoutAuthorInput {
  create?: Maybe<
    GroupCreateWithoutAuthorInput[] | GroupCreateWithoutAuthorInput
  >;
  delete?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  set?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  disconnect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  update?: Maybe<
    | GroupUpdateWithWhereUniqueWithoutAuthorInput[]
    | GroupUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | GroupUpsertWithWhereUniqueWithoutAuthorInput[]
    | GroupUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  updateMany?: Maybe<
    GroupUpdateManyWithWhereNestedInput[] | GroupUpdateManyWithWhereNestedInput
  >;
}

export interface GroupUpdateWithWhereUniqueWithoutAuthorInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutAuthorDataInput;
}

export interface GroupUpdateWithoutAuthorDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  city?: Maybe<String>;
  region?: Maybe<regionType>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
  geodata?: Maybe<GeometryUpdateOneRequiredWithoutGroupInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutGroupInput>;
}

export interface GroupUpsertWithWhereUniqueWithoutAuthorInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutAuthorDataInput;
  create: GroupCreateWithoutAuthorInput;
}

export interface GroupScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  region?: Maybe<regionType>;
  region_not?: Maybe<regionType>;
  region_in?: Maybe<regionType[] | regionType>;
  region_not_in?: Maybe<regionType[] | regionType>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  AND?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  OR?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  NOT?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
}

export interface GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput;
  data: GroupUpdateManyDataInput;
}

export interface GroupUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  city?: Maybe<String>;
  region?: Maybe<regionType>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface GeometrySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GeometryWhereInput>;
  AND?: Maybe<
    GeometrySubscriptionWhereInput[] | GeometrySubscriptionWhereInput
  >;
  OR?: Maybe<GeometrySubscriptionWhereInput[] | GeometrySubscriptionWhereInput>;
  NOT?: Maybe<
    GeometrySubscriptionWhereInput[] | GeometrySubscriptionWhereInput
  >;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface MeetingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MeetingWhereInput>;
  AND?: Maybe<MeetingSubscriptionWhereInput[] | MeetingSubscriptionWhereInput>;
  OR?: Maybe<MeetingSubscriptionWhereInput[] | MeetingSubscriptionWhereInput>;
  NOT?: Maybe<MeetingSubscriptionWhereInput[] | MeetingSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Geometry {
  id: ID_Output;
  latitude: Float;
  longitude: Float;
}

export interface GeometryPromise extends Promise<Geometry>, Fragmentable {
  id: () => Promise<ID_Output>;
  group: <T = GroupPromise>() => T;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
}

export interface GeometrySubscription
  extends Promise<AsyncIterator<Geometry>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  group: <T = GroupSubscription>() => T;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
}

export interface GeometryNullablePromise
  extends Promise<Geometry | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  group: <T = GroupPromise>() => T;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
}

export interface Group {
  id: ID_Output;
  name: String;
  description: String;
  city: String;
  region: regionType;
  phone?: String;
  email?: String;
  address?: String;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  city: () => Promise<String>;
  region: () => Promise<regionType>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  address: () => Promise<String>;
  geodata: <T = GeometryPromise>() => T;
  meetings: <T = FragmentableArray<Meeting>>(args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<regionType>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  geodata: <T = GeometrySubscription>() => T;
  meetings: <T = Promise<AsyncIterator<MeetingSubscription>>>(args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  city: () => Promise<String>;
  region: () => Promise<regionType>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  address: () => Promise<String>;
  geodata: <T = GeometryPromise>() => T;
  meetings: <T = FragmentableArray<Meeting>>(args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  groups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Meeting {
  id: ID_Output;
  name: String;
  weekday: Weekday;
  time: String;
  type?: meetingType;
}

export interface MeetingPromise extends Promise<Meeting>, Fragmentable {
  id: () => Promise<ID_Output>;
  group: <T = GroupPromise>() => T;
  name: () => Promise<String>;
  weekday: () => Promise<Weekday>;
  time: () => Promise<String>;
  type: () => Promise<meetingType>;
}

export interface MeetingSubscription
  extends Promise<AsyncIterator<Meeting>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  group: <T = GroupSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  weekday: () => Promise<AsyncIterator<Weekday>>;
  time: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<meetingType>>;
}

export interface MeetingNullablePromise
  extends Promise<Meeting | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  group: <T = GroupPromise>() => T;
  name: () => Promise<String>;
  weekday: () => Promise<Weekday>;
  time: () => Promise<String>;
  type: () => Promise<meetingType>;
}

export interface GeometryConnection {
  pageInfo: PageInfo;
  edges: GeometryEdge[];
}

export interface GeometryConnectionPromise
  extends Promise<GeometryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GeometryEdge>>() => T;
  aggregate: <T = AggregateGeometryPromise>() => T;
}

export interface GeometryConnectionSubscription
  extends Promise<AsyncIterator<GeometryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GeometryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGeometrySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GeometryEdge {
  node: Geometry;
  cursor: String;
}

export interface GeometryEdgePromise
  extends Promise<GeometryEdge>,
    Fragmentable {
  node: <T = GeometryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GeometryEdgeSubscription
  extends Promise<AsyncIterator<GeometryEdge>>,
    Fragmentable {
  node: <T = GeometrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGeometry {
  count: Int;
}

export interface AggregateGeometryPromise
  extends Promise<AggregateGeometry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGeometrySubscription
  extends Promise<AsyncIterator<AggregateGeometry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MeetingConnection {
  pageInfo: PageInfo;
  edges: MeetingEdge[];
}

export interface MeetingConnectionPromise
  extends Promise<MeetingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MeetingEdge>>() => T;
  aggregate: <T = AggregateMeetingPromise>() => T;
}

export interface MeetingConnectionSubscription
  extends Promise<AsyncIterator<MeetingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MeetingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMeetingSubscription>() => T;
}

export interface MeetingEdge {
  node: Meeting;
  cursor: String;
}

export interface MeetingEdgePromise extends Promise<MeetingEdge>, Fragmentable {
  node: <T = MeetingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MeetingEdgeSubscription
  extends Promise<AsyncIterator<MeetingEdge>>,
    Fragmentable {
  node: <T = MeetingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMeeting {
  count: Int;
}

export interface AggregateMeetingPromise
  extends Promise<AggregateMeeting>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMeetingSubscription
  extends Promise<AsyncIterator<AggregateMeeting>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GeometrySubscriptionPayload {
  mutation: MutationType;
  node: Geometry;
  updatedFields: String[];
  previousValues: GeometryPreviousValues;
}

export interface GeometrySubscriptionPayloadPromise
  extends Promise<GeometrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GeometryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GeometryPreviousValuesPromise>() => T;
}

export interface GeometrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GeometrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GeometrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GeometryPreviousValuesSubscription>() => T;
}

export interface GeometryPreviousValues {
  id: ID_Output;
  latitude: Float;
  longitude: Float;
}

export interface GeometryPreviousValuesPromise
  extends Promise<GeometryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
}

export interface GeometryPreviousValuesSubscription
  extends Promise<AsyncIterator<GeometryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  city: String;
  region: regionType;
  phone?: String;
  email?: String;
  address?: String;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  city: () => Promise<String>;
  region: () => Promise<regionType>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  address: () => Promise<String>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<regionType>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
}

export interface MeetingSubscriptionPayload {
  mutation: MutationType;
  node: Meeting;
  updatedFields: String[];
  previousValues: MeetingPreviousValues;
}

export interface MeetingSubscriptionPayloadPromise
  extends Promise<MeetingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MeetingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MeetingPreviousValuesPromise>() => T;
}

export interface MeetingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MeetingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MeetingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MeetingPreviousValuesSubscription>() => T;
}

export interface MeetingPreviousValues {
  id: ID_Output;
  name: String;
  weekday: Weekday;
  time: String;
  type?: meetingType;
}

export interface MeetingPreviousValuesPromise
  extends Promise<MeetingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  weekday: () => Promise<Weekday>;
  time: () => Promise<String>;
  type: () => Promise<meetingType>;
}

export interface MeetingPreviousValuesSubscription
  extends Promise<AsyncIterator<MeetingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  weekday: () => Promise<AsyncIterator<Weekday>>;
  time: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<meetingType>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Meeting",
    embedded: false
  },
  {
    name: "Geometry",
    embedded: false
  },
  {
    name: "Weekday",
    embedded: false
  },
  {
    name: "meetingType",
    embedded: false
  },
  {
    name: "regionType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
